1. 
Actor- 
	virtual void doSomething() = 0;
		I declared this a pure virtual because all Actors will have a 		doSomething() implementation of their own, and an object of type Actor alone will never need to exist.

   	bool isAlive() const;
		This function returns true if the current actor is alive and false otherwise. It is most useful for checking if the actor is alive before allowing it to doSomething in the Move() implementation. It is not virtual because various actors will simply have a boolean return value. It is const because it does not modify the m_isAlive member variable.

	bool isAlien() const;
		This function returns true if the current actor is an Alien and false otherwise. It is most useful for checking if the actor is an Alien before causing a projectile to interact with it in the Move() implementation. It is not virtual because various actors will simply have a boolean return value. It is const because it does not modify the m_alien member variable.

    	void die();
		This function sets the m_isAlive variable to false. It is used for whenever something has health < 0 or flies off the screen. The move function goes through and deletes all dead actors at each tick. It is not virtual because all actors need the same simple function to modify their living state.

    	StudentWorld* getWorld() const;
		This function returns a pointer to the current studentWorld. It is extremely useful for calling studentWorld functions inside of Actor implementations. It is const because it does not modify anything, and it is not virtual because the implementation is the same for all types of actors.	

    	void makeAlien();
		This function modifies m_alien to be true, so it is not const. It is also not virtual because the implementation is the same for all types of actors. It is useful for initializing alien actors to be aliens without adding an additional parameter for every other type of actor which would create unnecessary clutter.

    	bool flewOffLeft();
		This function returns true if at the current moment the x coordinate of the current object is < 0 and false otherwise. It is used for nearly every actor to tell it to die when this returns true during a tick. It is in the actor class because almost every actor has a scenario in which it dies after moving too far left (stars, alien projectiles, aliens, etc). It is not const because it sets the object to dead before returning true.

    	bool flewOffRight();
		This function returns true if at the current moment the x coordinate of the current object is >= VIEW_HEIGHT and false otherwise. It is used for player projectiles to tell it to die when this returns true during a tick. It is not const because it sets the object to dead before returning true.

	
    	bool offScreen();
		This function is basically a combination of flewOffRight, flewOffLeft, and flew off the top or bottom. Similarly, it sets the object to dead before returning true, so it is not const.



Star-
	void doSomething();
		This function moves the star 1 pixel left, and if it leaves the screen, it is set to dead.


Explosion-
	void doSomething();
		This function increases the size of the explosion by 50%, keeps track of how long it has been alive, and kills the explosion when it has been alive for 4 ticks.

Damageable Object-
	int getHealth() const;
		This function returns the health of the current damageable actor, so it is const.
	void setHealth(int health);
		This function takes an integer as a parameter and sets the health of the damageable object to that integer.


Nachenblaster-
	void doSomething();
...
If dead
Do nothing

Get last key press

If up, down, left, or right
Move up, down, left, or right

If tab,
	if the player has torpedoes,
		shoot a torpedo
		play torpedo sound
		decrement number of torpedoes

If space,
	if player has enough cabbage energy,
		shoot a cabbage
		play cabbage sound
		decrement cabbage
If escape,
	die
If cabbage energy not full,
	add a cabbage energy
...

	Int cabbageEnergy();
		This function simply returns the cabbage energy of the ship, so it is const.

	Int torpedoes();
		This function simply returns the number of torpedoes the ship has, so it is const.

	Void addTorpedoes(int torpedoes);
		This function takes an int as a parameter and adds it to the current number of torpedoes.


Alien-
	unsigned int scoreValue() const;
		This function simply returns the cabbage energy of the ship, so it is const.

    	double damageAmt() const;
		This function simply returns the damage amount associated with running into the alien, so it is const.

    	int getLength() const;
		This function simply returns the cabbage energy of the ship, so it is const.
		
    	void setDeltaX(double x);
		This function sets the trajectory of the x direction to x.

    	void setDeltaY(double y);
		This function sets the trajectory of the y direction to y.

    	void setLength(int length);
		This function sets the left of the trajectory to length.

    	double getDeltaX() const;
		This function simply returns the delta x value, so it is const.

    	double getDeltaY() const;
		This function simply returns the delta y value, so it is const.

    	void move();
		This function moves the Alien according to the current flight plan. The x and y changes are performed "speed" number of times per tick.

    	void maybeNewFlightPLan();
		...
If Alien needs a new flight plan,
	if Alien hits top of screen
		move down and left
	if alien hits bottom of screen
		move up and left
	if flight plan length runs out,
		1/3 chance due left
		1/3 chance up and left
		1/3 chance down and left
	set the new plan length to a random int between 1 and 32 inclusive
		...

    	bool maybeShoot(int sound, bool isSmoregon, int chance1, int chance2);
		...
	if the Player's ship is in the line of fire of current alien object,
		small chance of the alien shooting its respective projectile and playing sound
		do nothing else
	if it doesn't shoot and it is a Smoregon, it might ram 
	if it does nothing, return false
		...
	
   	void setSpeed(double speed);
		This function sets the speed of the Alien to the speed parameter. 
		
    	double getSpeed() const;
		This function simply returns the speed of the alien, so it is const.
		
    	bool possiblyHitPlayer();
		This function checks for a collision between the current alien and the Nachenblaster. If there is a collision, decrement the ship's health, kill the alien, play the death sound, add an explosion, and return true. If no collision, return false.

    	virtual void possiblyDropGoodie() = 0;
		This function is declared in the alien class as pure virtual because each alien has a different process of dropping goodies (for example, snagglegons and smoregons drop different items on different probabilities)


Smallgon-
	virtual void doSomething();
		If the smallgon is alive, check if it hit the player, check if it needs a new flight plan, check if it needs to shoot, move, decrement the length, and check again if it hit a player

    	virtual void possiblyDropGoodie();
		Smallgons don't drop goodies, so the functions simply returns. 

Smoregon-
	virtual void doSomething();
		If the smallgon is alive, check if it hit the player, check if it needs a new flight plan, check if it needs to shoot, move, decrement the length, and check again if it hit a player. If at any point the smoregon is killed, possibly drop a goodie

    virtual void possiblyDropGoodie();
		1/3 chance of dropping a goodie, if a goodie is dropped, there's a 50-50 chance its either a repair goodie or torpedo goodie. 

Snagglegon-
	virtual void doSomething();
		If the smallgon is alive, check if it hit the player, check if it needs a new flight plan, check if it needs to shoot, move, decrement the length, and check again if it hit a player. If at any point the smoregon is killed, possibly drop a goodie. NOTE, the doSomething() method for aliens is not declared in the Alien class because the aliens have different flight patterns and goodie dropping behaviors.

    virtual void possiblyDropGoodie();
	1/6 chance of dropping an extra life goodie.

Projectile-
	virtual void doSomething() = 0;
		this is declared pure virtual because all projectiles will have their own form of taking some action, and Projectile objects alone will never need to exist.

    bool possiblyHitShip();
	This function returns true if the projectile hits the nachenblaster and false otherwise. If it hits, damage the ship accordingly.

    bool hitAlien();
	This function returns true if the projectile hits any alien.
	
    bool hitAlien(Alien* a);
	This function is used within "bool hitAlien()". It returns true if the alien "a" is hit by the projectile. It also creates the explosion if it kills the alien, plays the Death sound, logs the kill, and allows it to possibly drop a goodie.

Cabbage-
	virtual void doSomething();
		If the cabbage is alive, make sure it's still on the screen and move it right. Also make it spin.

Turnip-
	virtual void doSomething();
		if the turnip is still alive, make sure it's still on the screen and move it left. Also make it spin and check if it hits the Nachenblaster.

FlatulanceTorpedo-
	virtual void doSomething() = 0;
		This is declared pure virtual because an object of type FlatulanceTorpedo will never exist, but each of the two types of torpedoes will have their own version of it.
		
PlayerTorpedo-
	virtual void doSomething();
		if the torpedo is still alive, make sure it's still on the screen and move it right. Also check if it hit any alien ships.

AlienTorpedo-
	virtual void doSomething();
		if the torpedo is still alive, make sure it's still on the screen and move it left. Also check if it hit the Nachenblaster.

Goodie-
	virtual void doSomething();
		This is not declared pure virtual because all goodies have the same action. If alive and on screen, check if it hits a ship and take action, otherwise, move it and recheck if it hits a ship.


    bool possiblyHitShip();
	if the goodie collides with a ship, this function returns true and returns false otherwise. If there's a collision, it increases the player's score by 100, kills the goodie, plays the sound, and calls the goodie's action function

    virtual void action() = 0;
	This is declared pure virtual because an object of type Goodie will never exist and thus never have a generic action, but each of the three types of goodies will have their own version of it.

ExtraLifeGoodie-
		  virtual void action();
	This function adds one life to the Nachenblaster.

RepairGoodie-		
   	 virtual void action();
		this function adds up to 10 health points to the ship without exceeding 50

TorpedoGodie-
    virtual void action();
		this function gives the ship 5 torpedoes.






STUDENTWORLD

virtual int init();
	create nachenblaster, add 30 random stars, and set number of aliens to kill, aliens destroyed to zero, and aliens on screen to zero
	
    virtual int move();
	...
refresh the game text
Allow the ship to do something
If the ship is dead,
	take away a life and return player died
If killed enough aliens
	return level finished
Allow each living actor on the screen to do something
Kill all dead actors
Introduce new stars randomly
Possibly introduce a new alien
Continue the game
	...	

    virtual void cleanUp();
	delete the ship and set to nullptr so the destructor doesn't cause problems (since it calls cleanup), delete all actors in the actors vector

    void addActor(Actor* actor);
	add "actor" to the actor vector

    bool inLineOfFire(const Actor* a);
	if the Nachenblaster is within +- 4 of the y value of "a", return true and false otherwise

    void maybeAddNewAlien();
	find the max number of aliens allowed on screen, aliens killed, and how many the players still needs to kill. If there are less aliens on the screen that the minimum of maximum aliens allowed per level and remaining aliens to kill, various chances to add smallgon, smoregon, or snagglegon

    void destroyedAlien();
	record that an alien was destroyed.

    int aliensToKill();
	return the number of aliens left to kill before the level is over.

    int aliensDestroyed();
	returns the number of aliens destroyed.

    void alienGone();
	decrement the number of aliens on the screen.

    bool collision(Actor* a, Actor* b);
	return true if a and b have collided.

    NachenBlaster* getShip();
	return a pointer to the ship.

    std::vector<Actor*>::iterator  actorsBegin();
	return the iterator position to the beginning of the actor vector.

    std::vector<Actor*>::iterator  actorsEnd();
	return the iterator position to the end of the actor vector.

    void setGameStatText();
	update the game text according to the member variables stored in the world with 2 spaces between each entry.




2. 
I am unaware of any bugs in my code or missing functionality. However, I have never witnessed a collision between an alien projectile and another alien, so I am not 100% sure if it behaves properly (allows it to go through).

3. 
I tweaked the left side of the screen for the stars to be -9 instead of 0 because ending it at zero for some reason caused them to disappear too early. -9 was the closest value I could get to the example. I also messed with the number of ticks the explosion survives because at first, my explosions seemed to get too large compared to the example.

4. 
I tested the star class by thoroughly noting each type of object passing over it without consequence including ships, projectiles, goodies, etc. I compared the appearances of randomness of position and size as best I could to the example to ensure my probability implementations were accurate.

I tested the explosion class by causing deaths on each alien type by collision as well as by cabbage,
Torpedo, and a combination of the two. I also compared the sizes and acceleration rate of the size to the example as best I could to make sure it is set to die at the proper tick.

I tested the Nachenblaster class by checking the move boundary in all directions, firing random combinations of projectiles, running into aliens, collecting all kinds of goodies in various orders and checking the move speed all compared to the example.

I tested the Aliens by playing as far as I could to make sure the number of aliens per round as you advance is updated properly, and killing as many as possible to ensure they behave properly when asked to possibly drop goodies.

I tested the projectiles by shooting every kind into all types of aliens and noting their damage as well as vigorously comparing their travel speed and rotation to the example. 












